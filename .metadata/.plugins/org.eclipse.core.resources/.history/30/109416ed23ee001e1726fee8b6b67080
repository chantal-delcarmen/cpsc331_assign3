package bst;

/**
 * 
 * Code reused and modified from tutorial notes 
 */

public class BinarySearchTree<T extends Comparable<T>> {
	class Node {
		T data = null;
		Node left = null;
		Node right = null;
		
		public Node(T data) {
			this.data = data;
		}
	}
	
	private Node root = null;
	private int size = 0;
	
//	public Node search(Node root, int key) {
//		if(root == null || root.data == key) {
//			return root;
//		}
//		
//		if (root.data < key) {
//			return search(root.right, key);
//		}
//		
//		return search(root.left, key);
//	}
	
	public int getSize() {
		return size;
	}
	
    public boolean contains(T element) {
        return containsRecursive(root, element);
    }

    private boolean containsRecursive(Node current, T element) {
        if (current == null) {
            return false;
        }

        if (element.compareTo(current.data) == 0) {
            return true;
        }

        return element.compareTo(current.data) < 0
            ? containsRecursive(current.left, element)
            : containsRecursive(current.right, element);
    }

    public void add(T element) {
        root = addRecursive(root, element);
    }

    private Node addRecursive(Node current, T element) {
        if (current == null) {
            return new Node(element);
        }

        if (element.compareTo(current.data) < 0) {
            current.left = addRecursive(current.left, element);
        } else if (element.compareTo(current.data) > 0) {
            current.right = addRecursive(current.right, element);
        } else {
            // value already exists
            return current;
        }

        return current;
    }
    
	// Check if it exists in tree
	// If does not exist already in tree, 
		// Insert node
	public void insert(T number) {
		if(!contains(number)) {
			add(number);	
			System.out.print("\n" + number + " was successfully added to the tree");
			size++;
		} else {
			System.out.print("\n" + number + " already exists in tree, number not added");
		}
	}
	
	
	// Remove odd value nodes from tree
	
	// Insert k = 50 new random integers 
	// Check if exists in tree
	// If not in tree, repeat the following
	
		// Find height of the tree
	
		// Measure time needed for insertion process
	
		// Store values (hi, ti) in data structure
}
